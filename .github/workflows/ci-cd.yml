name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  PROJECT_ID: work-orders-435517
  REGION: us-central1
  REPOSITORY: work-order-pipeline
  IMAGE_NAME: work-order-api

jobs:
  # Linting and Code Quality
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 isort mypy pylint
          
      - name: Run Black
        run: black --check src/ tests/
        
      - name: Run Flake8
        run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203
        
      - name: Run isort
        run: isort --check-only src/ tests/
        
      - name: Run mypy
        run: mypy src/ --ignore-missing-imports

  # Unit Tests
  test:
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Run unit tests
        run: |
          pytest tests/unit --cov=src --cov-report=xml --cov-report=html
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  # Integration Tests
  integration-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          pytest tests/integration -v

  # Build and Push Docker Images
  build-docker:
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        
      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker
          
      - name: Build and push API image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/Dockerfile.api
          push: true
          tags: |
            gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build and push Airflow image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/Dockerfile.airflow
          push: true
          tags: |
            gcr.io/${{ env.PROJECT_ID }}/airflow:${{ github.sha }}
            gcr.io/${{ env.PROJECT_ID }}/airflow:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy dbt Models
  deploy-dbt:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install dbt
        run: |
          python -m pip install --upgrade pip
          pip install dbt-bigquery==1.7.0
          
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          
      - name: Run dbt tests
        working-directory: ./dbt
        run: |
          dbt deps
          dbt test --profiles-dir .
          
      - name: Deploy dbt models
        working-directory: ./dbt
        run: |
          dbt run --profiles-dir . --target prod
          dbt snapshot --profiles-dir . --target prod

  # Deploy to Cloud Run
  deploy-api:
    runs-on: ubuntu-latest
    needs: [build-docker, deploy-dbt]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          
      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.IMAGE_NAME }}
          region: ${{ env.REGION }}
          image: gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          flags: |
            --allow-unauthenticated
            --min-instances=1
            --max-instances=10
            --memory=2Gi
            --cpu=2
            --set-env-vars="PROJECT_ID=${{ env.PROJECT_ID }}"
            --set-env-vars="BIGQUERY_DATASET=work_orders_production"

  # Deploy Airflow DAGs
  deploy-airflow:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          
      - name: Upload DAGs to Cloud Composer
        run: |
          gsutil -m rsync -r -d ./airflow/dags gs://${{ env.PROJECT_ID }}-composer-dags/dags/

  # Terraform Deploy
  terraform:
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init
        
      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -out=tfplan
        
      - name: Terraform Apply
        working-directory: ./terraform
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan

  # Post-deployment Tests
  smoke-tests:
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-airflow]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install test dependencies
        run: |
          pip install requests pytest
          
      - name: Run smoke tests
        run: |
          pytest tests/smoke -v
          
      - name: Health check API
        run: |
          API_URL=$(gcloud run services describe ${{ env.IMAGE_NAME }} --region=${{ env.REGION }} --format='value(status.url)')
          curl -f ${API_URL}/health || exit 1
